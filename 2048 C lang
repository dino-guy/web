#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h>
#define SIZE 4

int grid[SIZE][SIZE];

void initializeGrid() {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            grid[i][j] = 0;
        }
    }
    addRandomTile();
    addRandomTile();
}

void addRandomTile() {
    int emptyTiles[SIZE * SIZE][2];
    int emptyCount = 0;

    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (grid[i][j] == 0) {
                emptyTiles[emptyCount][0] = i;
                emptyTiles[emptyCount][1] = j;
                emptyCount++;
            }
        }
    }

    if (emptyCount > 0) {
        int randomIndex = rand() % emptyCount;
        int row = emptyTiles[randomIndex][0];
        int col = emptyTiles[randomIndex][1];
        grid[row][col] = (rand() % 2 + 1) * 2;
    }
}

void printGrid() {
    system("cls");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%4d", grid[i][j]);
        }
        printf("\n");
    }
}

void rotateGrid() {
    int temp[SIZE][SIZE];
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            temp[i][j] = grid[i][j];
        }
    }
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            grid[i][j] = temp[SIZE - j - 1][i];
        }
    }
}

int slideAndCombineRow(int row[SIZE]) {
    int moved = 0;
    for (int i = 0; i < SIZE - 1; i++) {
        for (int j = 0; j < SIZE - 1; j++) {
            if (row[j] == 0 && row[j + 1] != 0) {
                row[j] = row[j + 1];
                row[j + 1] = 0;
                moved = 1;
            }
        }
    }
    for (int i = 0; i < SIZE - 1; i++) {
        if (row[i] == row[i + 1] && row[i] != 0) {
            row[i] *= 2;
            row[i + 1] = 0;
            moved = 1;
        }
    }
    for (int i = 0; i < SIZE - 1; i++) {
        for (int j = 0; j < SIZE - 1; j++) {
            if (row[j] == 0 && row[j + 1] != 0) {
                row[j] = row[j + 1];
                row[j + 1] = 0;
                moved = 1;
            }
        }
    }
    return moved;
}

int moveLeft() {
    int moved = 0;
    for (int i = 0; i < SIZE; i++) {
        moved |= slideAndCombineRow(grid[i]);
    }
    return moved;
}

int moveRight() {
    int moved = 0;
    for (int i = 0; i < SIZE; i++) {
        int row[SIZE];
        for (int j = 0; j < SIZE; j++) {
            row[j] = grid[i][SIZE - j - 1];
        }
        moved |= slideAndCombineRow(row);
        for (int j = 0; j < SIZE; j++) {
            grid[i][SIZE - j - 1] = row[j];
        }
    }
    return moved;
}

int moveUp() {
    int moved = 0;
    rotateGrid();
    rotateGrid();
    rotateGrid();
    moved = moveLeft();
    rotateGrid();
    return moved;
}

int moveDown() {
    int moved = 0;
    rotateGrid();
    moved = moveLeft();
    rotateGrid();
    rotateGrid();
    rotateGrid();
    return moved;
}

int checkGameOver() {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (grid[i][j] == 0) return 0;
            if (i < SIZE - 1 && grid[i][j] == grid[i + 1][j]) return 0;
            if (j < SIZE - 1 && grid[i][j] == grid[i][j + 1]) return 0;
        }
    }
    return 1;
}

int main() {
    srand(time(NULL));
    initializeGrid();
    printGrid();

    while (1) {
        char move = _getch();
        int moved = 0;
        switch (move) {
            case 'w': moved = moveUp(); break;
            case 'a': moved = moveLeft(); break;
            case 's': moved = moveDown(); break;
            case 'd': moved = moveRight(); break;
            default: continue;
        }
        if (moved) {
            addRandomTile();
            printGrid();
            if (checkGameOver()) {
                printf("Game Over!\n");
                break;
            }
        }
    }
    return 0;
}
